!! Getting Started
@chagettingstarted

In this section we give the basic steps to get you started with your first Pillar document and exports. You first need to create a ''base directory'' inside
which we will put all your text, configuration files, and Pillar itself. The use of pillar is possible on all platforms supported by Pharo. In fact Pillar is executed on top of Pharo 
so you can use it on Linux, MacOSX or Windows.

In this part we will describe the complete setup. We will show how to install Pillar, create a book and version your document  in a git repository to version the booklet files. The example used for this is this booklet itself.
The current installation refers to Pillar 70. 

We take as hypothesis that you want to version your document on gihub but Pillar does not care about this. 
Now in the next chapter we will explain how to use github service integration. Such services only work with github.

!!!Pillar installation on Mac OS X / Linux

!!!!Building from sources

You first need to get Pillar.

Execute the ==build.sh== script found in the ''scripts'' directory:

[[[
$ git clone git@github.com:pillar-markup/pillar.git
$ cd pillar
$ ./scripts/build.sh
]]]

@@note For OSX users, you might need to install ==wget== via ==brew== following for example:

[[[
# The following lines will install both Homebrew and wget, ignore the first one if Homebrew is already installed
$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
$ brew install wget --with-libressl
]]]

!!!!Setting up the environment

You can then proceed to install that pillar build where you want.
For example, you can place it in a hidden directory in your home directory:

[[[
# Go back to the previous directory and 
# move the pillar directory to your HOME
$ cd ..
$ mv pillar ~/.pillar
]]]

Then add that directory to the PILLAR_HOME and HOME environment variables, for example, by modifying your .bashrc (or .zshrc) with:
[[[
export PILLAR_HOME="$HOME/.pillar/build"
export PATH="$PATH:$PILLAR_HOME"
]]]

!!!!Test your installation

To test your pillar installation, open a new terminal and execute the pillar ==\-\-version command==. If everything is ok, that should print out (as in the current version) the version of the Pharo VM. For example:

[[[
$ pillar --version
M:    CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d...
]]]

%We might want to add a paragraph showing if the building part works here

!!!Pillar installation on Windows

%Update needed
%Windows is not able to deals with .sh and makefile script natively, so we have to install Pillar manually or install *https://www.cygwin.com/* which provides functionality similar to a %Linux distribution.
%If you decide to install cygwin you should be able to follow the Mac OS X / Linux installation section otherwise you can follow the next steps.
%If you don't have Pharo you can get it here : *http://files.pharo.org/platform/Pharo5.0-win.zip*
%Then download and extract the content of Pillar-deployment.zip in the Pharo directory.
%*https://ci.inria.fr/pharo-contribution/job/Pillar/PHARO=50,VERSION=stable,VM=vm/lastSuccessfulBuild/artifact/Pillar-deployment.zip*

!!!Getting started

To create a book, you can start by installing the book archetype in a directory where you want to manage it:

[[[
$ mkdir my-new-book
$ cd my-new-book
$ pillar archetype book
]]]

You can then edit the pillar files and the pillar configuration file ''pillar.conf''.
You might need to add your chapters in the file ''index.pillar'' following the line:
[[[
${inputFile:Chapters/YourChapter.pillar}$
]]] 

For example, the basic archetype\'s index:

[[[
!My First book
${inputFile:Chapters/Chapter1/chapter1.pillar}$
${inputFile:Chapters/Chapter2/chapter2.pillar}$
]]]

!!!Building a document

Finally, you can generate your book in pdf or html using the command ==pillar build ...==.
@@note LateX is needed to build a pdf, if you have not installed it yet, install the texlive-full in your system
For Linux users, 
[[[
sudo apt-get install texlive-full
]]]

For OSX users,
[[[
#We need to install brew if not done before
$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

#Then simply run the next line to install texmaker 
$ brew install homebrew/cask/texmaker

#cask is a homebrew addon needed to install 
#texmaker installed through previous line
]]]

Finally, the generation of your document in pdf or html is done by:
[[[
#First line for pdf, second for html
$ pillar build pdf
$ pillar build html
]]]

The resulting pdf or html site will be written into the ==\_result== directory.


% Local Variables:
% compile-command: "cd .. && ./pillar export --to=\"LaTeX by chapter\" PillarChap/Pillar.pillar && bash pillarPostExport.sh"
% End:

!!! Creating your own versioned booklet

We imagine that you want to write a little booklet as the one you are currently reading and that this booklet will be stored on github. 

!!!! Cloning a git repository

Let us clone the repository which is empty right now.
[[[
git clone git@github.com:SquareBracketAssociates/Booklet-PublishingAPillarBooklet.git
]]]

[[[
cd Booklet-PublishingAPillarBooklet
]]]



!!!! Selecting and Installing Book
Pillar come with several templates and you can define your own using mustache (see the book Entreprise Pharo: a Web perspective).
By default Pillar offers the following templates:

- Book. This is the template used in recent Pharo books and booklets. 
- Presentation. These are the beamer templates used for example in the Pharo mooc. 
- Basic-latex. This template is good to generate basic reports. What is nice is that you do not need the latest version of latex packages. 
- Welcome. This template is to teach how to build templates. 

To install a template you should indicate it to pillar using the archetype command as follows: 

[[[
pillar archetype book
]]]

Then you can compile the default template to check that it effectively worked. 

[[[
pillar build pdf 
]]]

produces a book in the folder ==_result==. Indeed the folder Chapters and figures contain some samples.

!!!! Versioning your book

Now to version simply you book you should version all the files except ==_result==. 
Later we will show you how to add travis and bintray support for automatic compilation so that you do not need to install locally LaTeX on your machine. 

[[[
$ git add pillar.conf
$ git add _support
$ git add Chapters
$ git add book.pillar
]]]

!!!! Adding a .gitignore

Not all the downloaded files are worth versionning. We suggest the following .gitignore configuration. 

[[[
more .gitignore
>>>
/_result/
]]]

You can remove the folder figures and the chapter samples. 
Now you are ready to commit your files. 


!!! Adapting Pillar to your Book
Now we are ready to produce your own book. For this we edit some configuration files, in addition to edit some chapters. We focus on the configuration of files.

You need to edit two files:
- pillar.conf which defines all the concerns such as author name, book tile but also the book template.
- book.pillar which lists the chapters in order and is the place to add some glue text.

!!!! Editing pillar.conf 

You can start to edit the file ==pillar.conf==.
The main points are:
- title: 
- attribution: Give the author of the booklet.
- chapters. Here you should give the list of the files. You can put them in separate folders or not. 

Here is the ==pillar.conf== file of this booklet
[[[
{
  "title": "Publishing a Pillar Booklet",
  "attribution": "St√©phaneDucasse",
  "series": "Square Bracket tutorials",
  "keywords": "project template, Pillar, Pharo, Smalltalk",
  
  "outputDirectory": "build",
  "mainDocument": "book",
  "inputFile":"book.pillar",
  "latexTemplate": "_support/templates/main.latex.mustache",
  "latexChapterTemplate": "_support/templates/chapter.latex.mustache",
  "htmlTemplate": "_support/templates/html.mustache",
  "htmlChapterTemplate": "_support/templates/html.mustache",
  "newLine": #unix,
  "latexWriter": #'latex:sbabook',
  "htmlWriter": #html
}
]]]

@@todo we should check if we really need outputDirectory: build?

!!!! Editing book.pillar
Now we will edit the file ==book.pillar== (the file listed in == "mainDocument": "book"== in the ==pillar.conf== file).

We can simply add text there and file to be included using the Pillar command ==\$\{inputFile:nameOfTheFIle.pillar\}\$ as follows:
[[[
$ more book.pillar

The current document is a little tutorial to show you how to begin with the creation of booklet.
It describes the installation, customisation and integration with travis and bintray online services.
${inputFile:Chapters/GettingStarted.pillar}$

${inputFile:Chapters/TravisBintray.pillar}$
]]]


!!! Conclusion

Now you are ready to write your document in Pillar and get them exported in PDF and HTML. 

