!! Pillar core syntactic elements
@chawriting

In this chapter, we present the Pillar syntax. Have a look at the
Chapter *@chacheat*: it contains a two pages summary. We use the current text as example, notice however, that some results may be different on other support like HTML because of different common practices (for example creating an anchor with the reference instead of a footnote for an external link).

It is important to see that since Pillar is extensible, plugins may extend the default markup. The extension mechanisms
allow one not to learn new syntax but just new tags and parameters as will present later.


!!! Headings: Chapters & sections
@chapterAndSections

A line starting with ==!== represents a heading. Use multiple ==!== to create sections and subsections.

[[[language=pillar
!!!Headings: Chapters & Sections
]]]

is the way the current section is created. The exporter and template may interpret the section the way they want (.i.e., for example outputing ==\subsection== instead of ==\section==).

Some exporters support the possibility to specify a level of interpretation for ==!==.
==headingLevelOffset== controls how to convert from the level of a Pillar heading to the level of heading in your exported document.
For example, a ==headingLevelOffset== of 3 converts a 1st level Pillar heading to an ==<h4>== in HTML.


[[[language=pillar
"headingLevelOffset" : 3
]]]
This feature does not work in Pillar 7.0 and it is planned to reintroduce it. 

!!! References and links

!!!!Anchor definition
 To refer to a section or chapter, put an anchor (equivalent to ==\\label\{chapterAndSections\}== in LaTeX) using the ==@chapterAndSections== syntax on a ''separate line''. 
 
[[[language=pillar
@chapterAndSections
]]]
 
!!!!Anchor reference
When you want to refer to an anchor (equivalent to ==\\ref\{chapterAndSections\}== in LaTeX), use the ==\*@chapterAndSections\*== syntax. Anchors are invisible and links will be rendered as: *@chapterAndSections*. If you get a Fig. without a number this is probably that you forgot the ==@== in the reference.

[[[language=pillar
*@chapterAndSections*
]]]

!!!!Alias

You can create alias for links. This is especially adapted for web sites containing reference to other pages.

[[[language=pillar
*Chapters>chapterAndSections*
]]]

creates the link *Chapters>chapterAndSections*. Again the template may interpret this differently.

To create a link to another pillar file, use the ==\*Alias>File.pillar@AnchorName\*==. The alias and anchor parts are optional but you will need them in some cases (for example if you have an inter-file link and you export in LaTeX, or if you have an inter-file link and you export all your file in the same html file).

!!!!External links

To create links to external resources, use the ==\*Pharo>http://pharo.org/\*== syntax which is rendered as *Pharo>http://pharo.org/*. 

[[[language=pillar
*http://www.pharo.org*
]]]

The same syntax can also represent email addresses: write ==\*dupond@free.fr\*== to get *dupond@free.fr*.


!!! Lists
Pillar offers three default lists: Bullet, numbered and labelled.

!!!! Bulleted lists

[[[language=pillar
-A block of lines,
-where each line starts with ==-==
-is transformed to a bulleted list
]]]

generates

-A block of lines,
-where each line starts with ==-==
-is transformed to a bulleted list

!!!!Numbered lists

[[[language=pillar
#A block of lines,
#where each line starts with ==#==
#is transformed to a numbered list
]]]

generates

#A block of lines,
#where each line starts with ==#==
#is transformed to a numbered list

!!!!Definition lists

Definition lists (''aka.'' description lists) are lists with labels:

[[[language=pillar
;blue.
:color of the sky
;red.
:color of the fire
]]]

generates

;blue.
:color of the sky
;red.
:color of the fire

!!!!List nesting

[[[language=pillar
-Lists can also be nested.
-#Thus, a line starting with ==-#==
-#is an element of an unordered list that is part of an ordered list.
]]]

generates

-Lists can also be nested.
-#Thus, a line starting with ==-#==
-#is an element of a bulleted list that is part of an ordered list.

!!!Commented lines

Lines that start with a ==%== are considered comments and will not be rendered in the resulting document.

!!!Escaping characters

Special characters (e.g., ==\+== and ==\*==) must be escaped with a backslash: to get a ==\+==, you actually have to write ==\\\+==. The list of characters to escape is:

[[[eval=true
| characters |
characters := (PRPillarGrammar markups inject: Set new into: [ :chars :markup | chars addAll: markup. chars]) copyWithout: Character space.
stream nextPutAll: '[[['; cr.
characters do: [:char | stream nextPut: char] separatedBy: [ stream nextPutAll: ', ' ].
stream cr; nextPutAll: ']]]'; cr.
]]]


!!!Formatting
There is some syntax for text formatting:

-To make something ""bold"", write ==\""bold\""== (with 2 double quotes)
-To make something ''italic'', write ==\''italic\''== (with 2 single quotes)
-To make something ==monospaced==, write ==\=\=monospaced\=\===
-To make something --strikethrough--, write ==\--strikethrough\--==
-To make something @@subscript@@, write ==\@@subscript\@@==
-To make something ^^superscript^^, write ==\^^superscript\^^==
-To make something __underlined__, write ==\__underlined\__==


!!!Pictures
To include a picture, use the syntax ==\+caption>file://filename|parameters+==:

[[[language=pillar
+Caption of the picture.>file://figures/pharo-logo.png|width=50|label=pharoLogo+
]]]

generates Figure *@pharoLogo* (this reference has been generated using ==\*@pharoLogo*==).

Parameters are pairs =="label"="value"== separated by ==\|==.

+Caption of the picture.>file://figures/pharo-logo.png|width=50|label=pharoLogo+


!!!Tables
To create a table, start the lines with ==|== and separate the elements with ==|==. Each new line represents a new row of the table. Add a single ==!== to let the cell become a table heading.

[[[language=pillar
|!Country |!Capital
|France | Paris
|Belgium | Brussels
]]]

|!Country |!Capital
|France | Paris
|Belgium | Brussels


The contents of cells can be aligned left, centered or aligned right by using ==|{==, ==||== or ==|}== respectively.

[[[language=pillar
||centered||!centered header||centered
|{ left |} right || center
]]]

generates:

||centered||!centered header||centered
|{ left |} right || center



!!!Preformatted
To create a preformatted block, begin each line with ==\===. A preformatted block uses equally spaced text so that spacing is preserved. In general you should prefer code block over preformatted blocks. Code blocks more powerful. 

= = this is preformatted text
= = this line as well

!!!Code block
@scripts

Use code blocks when you want to add code snippets to your document.
Code blocks are delimited by ==\[\[\[== and ==\]\]\]==.

= [[[
= foo bar
= ]]]

generates

[[[language=no language
foo bar
]]]

!!!! Code block with a label or caption

If you want either a label (to reference the code later) or a caption (to give a nice title to the code block), check out the following example:

= [[[label=foobar|caption=My code block that works|language=smalltalk
= self foo bar
= ]]]

which produces the *@foobar* script (this reference is produced with ==\*@foobar\*==).

[[[label=foobar|caption=My code block that works|language=smalltalk
self foo bar
]]]

!!!! Code block syntax highlighting
@sec:syntaxHighlighting

To specify the syntax of a code block, use the ==language== parameter.
For example, in *@foobar* we set this to ==smalltalk== via (==language=smalltalk==).


[[[eval=true
| languages |
stream nextPutAll: '@@note The currently supported languages are '.
languages := PRRealScriptLanguage withAllConcreteClasses collect: #standardName.
languages asStringOn: stream delimiter: ', ' last: ' and '
]]]

If you don't want syntax highlighting for a particular script, aset it to ==no language==.

!!!! Code block with line numbers

If you need to explain a long piece of code, you may want a code block to have line numbers:

= [[[lineNumber=true
= self foo bar.
= self bar foo.
= ]]]

produces

[[[lineNumber=true
self foo bar.
self bar foo.
]]]

!!!! Code block from an external file

If you want you can also include a code block from a external file. For example if you have a file `myProject.html` and you want to take the code from line 15 to
line 45, instead of copy/pasting the code you can use:

= [[[language=html|fromFile=myProject.html|firstLine=15|lastLine=45
= ]]]

The ==firstLine== and ==lastLine== parameters are optional.


!!! Annotated paragraphs

An empty line starts a new paragraph.

An annotated paragraph starts with ==\@@== followed by a keyword such as ==todo== or ==note==. For example,

[[[language=pillar
@@note this is a note annotation.
]]]

generates

@@note this is a note annotation.

And,

[[[language=pillar
@@todo this is a todo annotation
]]]

generates this todo annotation

@@todo this is a todo annotation

==@\@todo== and ==@\@note== are the templates supported by default. 

!!!Raw

If you want to include raw text into a page you must enclose it between =={\{{== and ==}\}}==, otherwise Pillar ensures that text appears as you type it which might require transformations.

A good practice is to always specify for which kind of export the raw text must be outputted by starting the block with ==\{{{latex:== or ==\{{{html:==. For example, the following shows a formula, either using LaTeX or plain text depending on the kind of export.

= {{{latex:
= \begin{equation}
=    \label{eq:1}
=    \frac{1+\sqrt{2}}{2}
= \end{equation}
= }}}
= {{{html:
= (1+sqrt(2)) / 2
= }}}

""Take care:"" Avoid terminating the verbatim text with a ==}== as
this will confuse the parser. An easy fix is to add a space or two at the end. So, instead of writing ==\{{{\\begin{scriptsize}}}}==, write ==\{{{\\begin{scriptsize} }}}==.


!!! Meta-Information
Meta-information of a particular file is written at the start of the file between curly braces using the STON syntax (a superset of JSON). Meta-information markup starts with a word between quotation marks acting as a key, followed by a colon ==:==, and then a value.

For example, the following Pillar file,

[[[language=pillar
{
	"title": "A first document",
	"author": "John Doe"
}

!Hello World
]]]

represents a Pillar document with the title and author set. You can use whatever keys you like, and they can be used in templates (see Chapter *@templating* for more information about templating).

For example, the template for the current book uses the following template variables: attributions, title, series, and keywords. 
You can see this in the file main.mustache in the \_support/template/latex folder.


!!! Annotations: supporting extensions

Annotations are the Pillar way to have extensible syntax. An annotation has the following form:

[[[language=pillar
${tag:parameter=value|parameter2=value2}$
]]]

You can think of the tag as the ''type'' of annotation and parameters as method arguments. Pay attention that each plugin should handle tag or parameter processing. 

Here are some existing examples:

!!!!InputFile annotation

You can include a file in another pillar file. The ==inputFile== annotation takes a ==path== parameter, the value of which is relative to ==baseDirectory== (which defaults to your working directory). In this example, 2 files are included:

[[[language=pillar
${inputFile:path=test.pillar}$

${inputFile:path=chapter2/chapter2.pillar}$
]]]

!!!!Footnote annotation

You can add footnotes to explain or annotate words. The ==footnote== annotation takes a ==note== parameter specifying the text to appear at the end of the document. In this example, one footnote is added:

[[[
Foo${footnote:note=Some Explanation for Foo}$
]]]

In addition we should add the plugin as follows in the pillar.conf file.

[[[
  "plugins": ["PRFootnoteTransformer"],
]]]

!!!!Parameters

Pictures and scripts both use parameters to specify different options and variations. Parameters are =="label"="value"== pairs separated by ==\|==.

Here are two examples within the same expression, showing usage of parameters by both a code block and a caption:

= [[[label=foobar|caption=My code block that works|language=pillar
= +Caption of the picture.>file://figures/pharo-logo.png|width=50|label=pharoLogo+
= ]]]

!!! Generate a part of your document with a script

We'll now explore one of the most powerful and dynamic (but potentially dangerous) features. Since there is an entire development environment available underneath Pillar, blocks can not only be rendered for documentation purposes, but can be evaluated to dynamically alter the Pillar document model. By setting the code block ==eval== parameter to ==true==, the system offers you a stream variable that you can use to emit Pillar as specified by your code block. For example, here's a snippet from the block that generated the list of supported languages for syntax highlighting earlier in this document:

=[[[eval=true
= | languages |
= stream nextPutAll: '@@note The currently supported languages are '.
= languages := PRRealScriptLanguage withAllConcreteClasses collect: #standardName.
= ...
=]]]

Here's another example showing how you could include some metrics in your code's documentation:

= [[[eval=true
= | packages classes |
= packages := RPackageOrganizer default packages select: [ :each |
=                each name includesSubstring: 'Pillar' ].
= classes := packages flatCollect: [ :each | each classes ].
= stream
=    nextPutAll: 'The Pillar project contains:';
=    lf;
=    nextPutAll: '- ==';
=    print: packages size;
=    nextPutAll: ' packages==.';
=    lf;
=    nextPutAll: '- ==';
=    print: classes size;
=    nextPutAll: ' classes=='.
= ]]]

which will generate:

[[[eval=true
| packages classes |
packages := (RPackageOrganizer default packages select: [ :each | each name includesSubstring: 'Pillar' ] ).
classes := packages flatCollect: [ :each | each classes ].
stream
   nextPutAll: 'The Pillar project contains:';
   lf;
   nextPutAll: '- ==';
   print: packages size;
   nextPutAll: ' packages==.';
   lf;
   nextPutAll: '- ==';
   print: classes size;
   nextPutAll: ' classes=='.
]]]

Since this feature enables arbitrary code evaluation, it presents a potential security risk. Therefore, it has to be explicitly enabled via a plugin declaration. To do this, add (=="plugins": ["PRScriptEvaluator"]==) to your ==pillar.conf==. For example:
 
[[[
	{
	  "title":"A simple reflective object kernel",
	  "attribution":"Stéphane Ducasse",
	  ...
	  "plugins": ["PRScriptEvaluator"],
	  ...
	}
]]]

!! Specific markup
This chapter presents some extensions specific to a given support such as LaTeX or slides.

!!!LaTeX

!!!!Citations

Citations, which are only available for LaTeX, let you refer to books or other publications. The ==cite== annotation takes a ==ref== parameter specifying a reference to an element in a LaTeX bibliography. For example:

[[[language=pillar
${cite:ref=Duca17a}$
]]]

This will render as ==\cite{Duca17a}==

If you want to use other types of citations like ==citep== or ==citet==, please overwrite the command in your LaTeX template:
==\renewcommand{\cite}{\citep}==

[[[
\bibliographystyle{alpha}
\bibliography{rmod,others,new}
]]]

You have to declare the plugin, and specify the bibliography file, like so: 
[[[
	{
	  "plugins": ["PRCitationTransformer"],
	  "bibFile": "others.bib",
	}
]]]


!!! Slides
Pillar offers the possibility to define slides via the presentation archetype. 

!!!!Slide annotation
@sec:slide

This annotation is used to create a slideshow structure for export to ==beamer== or ==deck.js==.
The parameter ""title"" is required.
The ""label"" parameter can be used to refer to this slide in another slide:

[[[language=pillar
${slide:title=My slide|label=sld:mySlide}$
]]]

!!!!Columns

With Pillar you can put text and other contents in columns.
To do that, you need to delimit a section with the ==columns== and ==endColumns== annotations.
Then you can create columns with the ==column== annotation, which takes 1 required parameter: the width of the column. Here is an example:

[[[language=pillar
${columns}$

   ${column:width=60}$
      bla
   ${column:40}$
      bla

${endColumns}$
]]]

@@note The column annotations currently work only for export to beamer, HTML and Deck.js.



